#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of seq_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import sys

from crumbs.utils.bin_utils import (main, parse_trimmer_args,
                                    create_trimmer_argparse)
from crumbs.utils.seq_utils import process_seq_packets
from crumbs.utils.tags import SEQRECORD
from crumbs.trim import TrimByQuality, TrimOrMask
from crumbs.seqio import (read_seq_packets, write_seq_packets, flush_fhand)
from crumbs.settings import get_setting


def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'It trims a fixed number of bases.'
    parser = create_trimmer_argparse(description=description)

    parser.add_argument('-q', '--qual_threshold', dest='threshold',
                        help='Quality threshold (default: %(default)s)',
                        default=get_setting('DEFAULT_QUALITY_TRIM_TRESHOLD'),
                        type=int)
    hlp = 'Window size to calculate quality mean (default: %(default)s)'
    parser.add_argument('-w', '--window', dest='window', help=hlp,
                        default=get_setting('DEFAULT_QUALITY_TRIM_WINDOW'),
                        type=int)

    parser.add_argument('-l', '--omit_left', dest='left', action='store_false',
                        help='Do not trim the left side')

    parser.add_argument('-r', '--omit_right', dest='right',
                        help='Do not trim the right side',
                        action='store_false')
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'
    args, parsed_args = parse_trimmer_args(parser)
    args['threshold'] = parsed_args.threshold
    args['window'] = parsed_args.window
    args['right'] = parsed_args.right
    args['left'] = parsed_args.left
    return args


def run():
    'The main function'
    parser = _setup_argparse()
    args = _parse_args(parser)

    in_fhands = args['in_fhands']
    out_fhand = args['out_fhand']

    seq_packets = read_seq_packets(in_fhands, file_format=args['in_format'],
                                   prefered_seq_classes=[SEQRECORD])
    trim_quality = TrimByQuality(window=args['window'],
                                 threshold=args['threshold'],
                                 trim_left=args['left'],
                                 trim_right=args['right'])
    trim_or_mask = TrimOrMask(mask=args['mask'])

    seq_packets, workers = process_seq_packets(seq_packets,
                                               [trim_quality, trim_or_mask],
                                               processes=args['processes'])

    write_seq_packets(out_fhand, seq_packets, file_format=args['out_format'],
                      workers=workers)
    flush_fhand(out_fhand)

if __name__ == '__main__':
    sys.exit(main(run))

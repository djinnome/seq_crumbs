#!/usr/bin/env python

# Copyright 2013 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of seq_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import sys
from crumbs.utils.bin_utils import (main, parse_filter_args, argparse,
                                    build_version_msg, parse_basic_args,
    create_basic_argparse)
from crumbs.utils.file_utils import flush_fhand
from crumbs.settings import get_setting
from crumbs.filters import  filter_chimeras


def create_filter_argparse(add_reverse=True, **kwargs):
    'It returns a cmd parser for the filter executables'
    parser = create_basic_argparse(**kwargs)
    parser = argparse.ArgumentParser(parents=[parser], add_help=False)
    parser.add_argument('-c', '--chimeras', default=None,
                        help='File for chimeric sequences')
    parser.add_argument('-e', '--unknown', default=None,
                        help='File for not clear_sequences')
    r_help = 'Results are given by single reads (default:FALSE)'
    parser.add_argument('-r', '--unpaired_result', default=False, help=r_help)

    input_options = parser.add_argument_group('Input options')
    input_options.add_argument('-u', '--unpaired_reads', default=False,
                               help='sequences are paired',
                               action='store_true')
    input_options.add_argument('-a', '--reference_seq',
                               help='fpath with reference sequence')

    settings = get_setting('CHIMERAS_SETTINGS')
    settings_group = parser.add_argument_group('Settings')

    help1 = 'Max number of coincidences between mapping positions of primary '
    help1 += 'and secondary alignments to assume that they do not overlap'
    help1 += '(default:' + str(settings['MAX_COINCIDENCES']) + ')'
    settings_group.add_argument('--max_coincidences', default=None, help=help1,
                          type=int)
    help2 = 'Max mapq difference between secondary alignments and primary '
    help2 += 'to consider them for chimera finding'
    help2 += '(default:' + str(settings['MAX_MAPQ_DIFFERENCE']) + ')'
    settings_group.add_argument('--max_mapq_difference', default=None,
                                help=help2, type=int)
    help3 = 'Max distance between a mapped seq and one end of the reference'
    help3 += 'to consider that it is located at one end'
    help3 += '(default:' + str(settings['MAX_DISTANCE_TO_END']) + ')'
    settings_group.add_argument('--max_distance_to_end', default=None,
                                help=help3, type=int)
    help4 = 'Max distance between pair ends sequences. One chimera fragment'
    help4 += 'should be this close to the mate'
    help4 += '(default:' + str(settings['MAX_PE_LEN']) + ')'
    settings_group.add_argument('--max_pe_len', default=None,
                          help=help4, type=int)
    help5 = 'Min distance between two mates expected. It may change depending'
    help5 += 'on the size of the library'
    help5 += '(default:' + str(settings['MIN_MP_LEN']) + ')'
    settings_group.add_argument('--min_mp_len', default=None, help=help5,
                                type=int)
    help6 = 'Proportion of mapping positions required to consider a read '
    help6 += 'as fully mapped'
    help6 += '(default:' + str(settings['MAX_CLIPPING']) + ')'
    settings_group.add_argument('--max_clipping', default=None,
                          help=help6, type=float)
    help7 = 'Minimum seed length for mapping (default:19)'
    settings_group.add_argument('--min_seed_len', default=None, help=help7)
    return parser


def parse_filter_args(parser, add_reverse=True):
    'It parses the command line and it returns a dict with the arguments.'
    args, parsed_args = parse_basic_args(parser)
    args['chimeras_fpath'] = parsed_args.chimeras
    args['unknown_fpath'] = parsed_args.unknown
    args['unpaired'] = parsed_args.unpaired_reads
    args['in_format'] = parsed_args.in_format
    args['reference'] = parsed_args.reference_seq
    args['paired_result'] = not parsed_args.unpaired_result
    args['min_seed_len'] = parsed_args.min_seed_len

    settings = get_setting('CHIMERAS_SETTINGS')
    setting_args = {}
    setting_args['MAX_COINCIDENCES'] = parsed_args.max_coincidences
    setting_args['MAX_MAPQ_DIFFERENCE'] = parsed_args.max_mapq_difference
    setting_args['MAX_DISTANCE_TO_END'] = parsed_args.max_distance_to_end
    setting_args['MAX_CLIPPING'] = parsed_args.max_clipping
    setting_args['MAX_PE_LEN'] = parsed_args.max_pe_len
    setting_args['MIN_MP_LEN'] = parsed_args.min_mp_len
    for key in setting_args.keys():
        if setting_args[key] is not None:
            settings[key] = setting_args[key]
    args['settings'] = settings

    return args, parsed_args


def run():
    'The main function of the binary'
    description = 'It filters chimeric sequences from illumina mate pairs seqs'
    parser = create_filter_argparse(description=description)
    args = parse_filter_args(parser)[0]
    ref_fpath = args['reference']
    unpaired = args['unpaired']
    paired_result = args['paired_result']
    chimeras_fpath = args['chimeras_fpath']
    out_fhand = args['out_fhand']
    unknown_fpath = args['unknown_fpath']
    settings = args['settings']
    in_fhands = args['in_fhands']
    if chimeras_fpath is not None:
        chimeras_fhand = open(chimeras_fpath, 'w')
    else:
        chimeras_fhand = open('chimeric_pairs', 'w')
    if unknown_fpath is not None:
        unknown_fhand = open(unknown_fpath, 'w')
    else:
        unknown_fhand = open('unknown_pairs', 'w')
    min_seed_len = args['min_seed_len']

    filter_chimeras(ref_fpath, out_fhand, chimeras_fhand, in_fhands,
                    unknown_fhand, settings=settings, unpaired=unpaired,
                    paired_result=paired_result, min_seed_len=min_seed_len)
    flush_fhand(out_fhand)

if __name__ == '__main__':
    sys.exit(main(run))

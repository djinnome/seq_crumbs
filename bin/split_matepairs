#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of seq_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

from __future__ import division

import sys

from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord

from crumbs.utils.bin_utils import (main, parse_basic_parallel_args,
                                    create_basic_parallel_argparse)
from crumbs.utils.seq_utils import process_seq_packets
from crumbs.settings import get_setting
from crumbs.split_mates import MatePairSplitter
from crumbs.seqio import (read_seqrecord_packets, write_seqrecord_packets,
                          flush_fhand)


def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'It splits mate pair sequences'
    parser = create_basic_parallel_argparse(description=description)

    hlp = 'platform (454, flx, titanium, ion_torrent) or linker sequence '
    hlp += '(as a string, several can be given) (required)'
    parser.add_argument('-l', '--linker', dest='linkers', help=hlp,
                        action='append', required=True)
    return parser


def _is_dna_sequence(string):
    string = string.lower()
    length = len(string)
    no_actg = string.replace('a', '').replace('t', '').replace('c', '').replace('g', '')
    if len(no_actg) / length > 0.2:
        return False
    else:
        return True


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'
    args, parsed_args = parse_basic_parallel_args(parser)

    linkers = parsed_args.linkers
    new_linkers = []
    for linker in linkers:
        if linker == '454':
            new_linkers.extend(get_setting('FWD_454_LINKERS'))
        elif linker.lower() == 'flx':
            new_linkers.append(get_setting('FLX_LINKER'))
        elif linker.lower() == 'titanium':
            new_linkers.append(get_setting('TITANIUM_LINKER'))
            new_linkers.append(get_setting('TITANIUM_LINKER_REV'))
        elif linker.lower() == 'ion_torrent':
            new_linkers.append(get_setting('ION_TORRENT_LINKER'))
            new_linkers.append(get_setting('ION_TORRENT_LINKER_REV'))
        elif '.' in linker or '/' in linker:
            msg = 'The given linker is not a sequence or a platform. '
            msg += 'It looks like a file path.'
            parser.error(msg)
        elif not _is_dna_sequence(linker):
            msg = 'The linker is not a supported platform or a DNA sequence'
            parser.error(msg)
        else:
            new_linkers.append(linker)
    linkers = []
    for i, l in enumerate(new_linkers):
        linkers.append(SeqRecord(Seq(l), id='linker' + str(i)))

    args['linkers'] = linkers
    return args


def split_matepairs():
    'It splits the mate pair sequences'
    parser = _setup_argparse()
    args = _parse_args(parser)

    seqrecord_packets = read_seqrecord_packets(args['in_fhands'],
                                   file_format=args['in_format'])

    mate_splitter = MatePairSplitter(linkers=args['linkers'])
    seqrecord_packets, workers = process_seq_packets(seqrecord_packets,
                                                     [mate_splitter],
                                                   processes=args['processes'])

    write_seqrecord_packets(args['out_fhand'], seqrecord_packets,
                            args['out_format'], workers=workers)
    flush_fhand(args['out_fhand'])

if __name__ == '__main__':
    sys.exit(main(split_matepairs))

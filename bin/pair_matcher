#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of seq_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse

from crumbs.utils.bin_utils import (main, create_basic_argparse,
                                    parse_basic_args,
                                    get_requested_compression)
from crumbs.utils.file_utils import compress_fhand
from crumbs.pairs import match_pairs, match_pairs_unordered
from crumbs.seqio import read_seqrecords
from crumbs.settings import DEFAULT_SEQS_IN_MEM_LIMIT


def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'It matches paired reads and splits orphaned reads in other'
    description += ' file'
    parser = create_basic_argparse(description=description)
    #orphan
    parser.add_argument('-p', '--orphan', dest='orphan', required=True,
                       help='Output orphan file (required)',
                       type=argparse.FileType('wt'))
    hlp = 'Maximum number of reads in memory (default: %(default)s)'
    parser.add_argument('-l', '--limit', dest='limit', help=hlp, type=int,
                        default=DEFAULT_SEQS_IN_MEM_LIMIT)
    unor_help = 'paired reads are unordered and not just interleaved'
    parser.add_argument('-u', '--unordered', dest='unordered',
                        help=unor_help, action='store_true', default=False)
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'
    args, parsed_args = parse_basic_args(parser)
    orphan = parsed_args.orphan
    comp_kind = get_requested_compression(parsed_args)
    args['orphan'] = compress_fhand(orphan, compression_kind=comp_kind)
    args['memory_limit'] = parsed_args.limit
    if args['memory_limit'] == 0:
        args['memory_limit'] = None

    unordered = parsed_args.unordered
    # Pair_matcher based in index incompatible with stdin and withm ore
    # than one input file
    if unordered and (len(args['in_fhands']) > 1 or
                      args['in_fhands'][0] == sys.stdin):
        error_str = 'Unordered file option is not compatible with STDIN or '
        error_str += 'with more than one input file'
        parser.error(error_str)
    args['unordered'] = unordered
    return args


def run():
    'The main function of the binary'
    parser = _setup_argparse()
    args = _parse_args(parser)

    # read seqs
    if args['unordered']:
        match_pairs_unordered(args['in_fhands'][0].name,
                              out_fhand=args['out_fhand'],
                              orphan_out_fhand=args['orphan'],
                              out_format=args['out_format'])
    else:
        seqs = read_seqrecords(args['in_fhands'],
                               file_format=args['in_format'])
        match_pairs(seqs, out_fhand=args['out_fhand'],
                    orphan_out_fhand=args['orphan'],
                    out_format=args['out_format'],
                    memory_limit=args['memory_limit'])

if __name__ == '__main__':
    #sys.argv.append('-h')
    sys.exit(main(run))

#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of seq_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import sys

from crumbs.iterutils import sample
from crumbs.utils import main, create_basic_argparse, parse_basic_args
from crumbs.seqio import (write_seqrecords, guess_format, read_seqrecords,
                          count_seqs_in_files)
from crumbs.exceptions import SampleSizeError


def _setup_argparse():
    'It returns the argument parser'
    dsc = 'It selects some random sequences from the given files'
    parser = create_basic_argparse(description=dsc)
    parser.add_argument('-n', '--num_seqs', default=10, type=int,
                        dest='num_seqs', help='Number of sequences to print')
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'
    args, parsed_args = parse_basic_args(parser)
    args['num_seqs'] = parsed_args.num_seqs
    return args


def get_random_seqs(fhands, num_seqs):
    'it gets the random seqs'
    total_seqs = count_seqs_in_files(fhands)
    seqs = read_seqrecords(fhands)
    return sample(seqs, total_seqs, num_seqs)


def sample_seqs():
    'The main function of the head binary'
    parser = _setup_argparse()
    args = _parse_args(parser)

    in_fhands = args['in_fhands']
    out_fhand = args['out_fhand']
    num_seqs = args['num_seqs']
    try:
        seqs = get_random_seqs(in_fhands, num_seqs)
    except ValueError as error:
        if str(error) == "sample larger than population":
            raise SampleSizeError("sample larger than population")

    write_seqrecords(out_fhand, seqs, guess_format(in_fhands[0]))

if __name__ == '__main__':
    sys.exit(main(sample_seqs))

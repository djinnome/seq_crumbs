#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of seq_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse

from crumbs.utils.bin_utils import main
from crumbs.utils.tags import OUTFILE
from crumbs.utils.file_utils import (wrap_in_buffered_reader,
                                     uncompress_if_required)
from crumbs.settings import SUPPORTED_OUTPUT_FORMATS
from crumbs.seqio import guess_format, seqio
from crumbs.exceptions import TooManyFiles, WrongFormatError


def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'Get first seqs from file[s]'
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('input', help='Sequence input files to process',
                        default=sys.stdin, nargs='*',
                        type=argparse.FileType('rt'))

    parser.add_argument('-o', '--outfile', default=sys.stdout, dest=OUTFILE,
                        help='Sequence output file', nargs='*',
                        type=argparse.FileType('wt'))

    parser.add_argument('-f', '--out_format', dest='out_format',
                        help='format of the output file',
                        choices=SUPPORTED_OUTPUT_FORMATS)

    return parser


def _parse_basic_args(parser):
    'It parses the command line and it returns a dict with the arguments.'
    parsed_args = parser.parse_args()
    # we have to wrap the file in a BufferedReader to allow peeking into stdin
    wrapped_fhands = []
    in_fhands = parsed_args.input
    if not isinstance(in_fhands, list):
        in_fhands = [in_fhands]
    for fhand in in_fhands:
        fhand = wrap_in_buffered_reader(fhand)
        fhand = uncompress_if_required(fhand)
        wrapped_fhands.append(fhand)

    out_fhands = getattr(parsed_args, OUTFILE)
    if not isinstance(out_fhands, list):
        out_fhands = [out_fhands]

    out_format = parsed_args.out_format
    # The default format is the same as the first file
    if not out_format:
        out_format = guess_format(wrapped_fhands[0])
    # The original fhands should be stored, because otherwise they would be
    # closed
    args = {'out_fhands': out_fhands, 'in_fhands': wrapped_fhands,
            'out_format': out_format, 'original_in_fhands': in_fhands}
    return args


def _parse_args(parser):
    '''It parses the command line and it returns a dict with the arguments.'''
    args = _parse_basic_args(parser)

    in_fhands = args['in_fhands']
    if len(in_fhands) == 2:
        # 2 for fasta + qual and 1 for everything else
        formats = [guess_format(fhand) for fhand in in_fhands]
        if formats != ('fasta', 'qual'):
            msg = 'Wrong input file formats, the first one should be fasta'
            msg += ' and the second qual.'
            WrongFormatError(msg)
    elif len(in_fhands) > 2:
        msg = 'This command accepts, 0 input files (stdin), 2 files (fasta + '
        msg += 'qual) or 1 file (all other input formats, %s were given.'
        msg %= str(len(in_fhands))
        raise TooManyFiles(msg)

    fmt = args['out_format']
    # output fhands

    out_fhands = args['out_fhands']
    if len(out_fhands) > 2:
        msg = 'This command accepts, 0 output files (stout), 2 files (fasta + '
        msg += 'qual) or 1 file (all other output formats, %s were given.'
        msg %= str(len(in_fhands))
        raise TooManyFiles(msg)
    elif len(out_fhands) == 2 and fmt != 'fasta':
        msg = 'With 2 ouput files, the output format should be fasta '
        msg += '(and qual)'
        raise WrongFormatError(msg)

    return {'out_fhands': out_fhands, 'in_fhands': in_fhands,
            'format': fmt, 'original_in_fhands': args['original_in_fhands']}


def main_seqio():
    'The main function of the seqio binary'
    parser = _setup_argparse()
    args = _parse_args(parser)

    in_fhands = args['in_fhands']
    out_fhands = args['out_fhands']
    out_format = args['format']

    seqio(in_fhands, out_fhands, out_format)


if __name__ == '__main__':
    sys.exit(main(main_seqio))

#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of seq_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import sys

from crumbs.utils.bin_utils import (main, parse_basic_process_args,
                                    create_basic_process_argparse)
from crumbs.seqio import read_seq_packets, write_seq_packets
from crumbs.utils.seq_utils import process_seq_packets
from crumbs.filters import FilterBlastMatch


def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'It filters sequences using blast'
    parser = create_basic_process_argparse(description=description)
    parser.add_argument('-b', '--blastdb', dest='blastdb',
                        help='Blast database or path to sequence file')
    default_blast_program = 'blastn'
    hlp = 'blast program to use (default' + default_blast_program + ')'
    parser.add_argument('-g', '--blast_program', dest='blast_program',
                        help=hlp, default=default_blast_program)
    parser.add_argument('-e', '--expected', dest='expected',
                        help='Maximum e-value', type=float)
    parser.add_argument('-s', '--similarity', dest='similarity', type=float,
                        help='Minimum percentage of similarity')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-l', '--min_len', dest='min_len', type=float,
                        help='Percentage of the length that should match')
    group.add_argument('-a', '--abs_len', dest='abs_len', type=int,
                        help='Length of the query that should match')
    parser.add_argument('-r', '--reverse',
                        help='Reverses the filtering (keep matched sequences)',
                        action='store_true', default=False)

    return parser


def _parse_args(parser):
    'It parses the arguments'
    args, parsed_args = parse_basic_process_args(parser)
    if parsed_args.blastdb is None:
        return parser.error('path to blast parser is mandatory')
    else:
        args['blastdb'] = parsed_args.blastdb
    args['blast_program'] = parsed_args.blast_program
    args['expected'] = parsed_args.expected
    args['similarity'] = parsed_args.similarity
    args['min_len'] = parsed_args.min_len
    args['abs_len'] = parsed_args.abs_len
    args['reverse'] = parsed_args.reverse

    is_none = lambda x: True if x is None else False
    if all([is_none(arg) for arg in args['expected'], args['similarity'],
            args['min_len'], args['abs_len']]):
        parser.error('At least a filter must be Used')

    return args


def _prepare_filters(args):
    'it prepares the filters to use'
    filters = []
    if args['expected'] is not None:
        filters.append({'kind': 'score_threshold', 'score_key': 'expect',
                        'max_score': args['expected']})
    if args['similarity'] is not None:
        filters.append({'kind': 'score_threshold', 'score_key': 'identity',
                        'min_score': args['similarity']})
    if args['min_len'] is not None:
        filters.append({'kind': 'min_length',
                        'min_percentage': args['min_len'],
                        'length_in_query': True})
    if args['abs_len'] is not None:
        filters.append({'kind': 'min_length',
                        'min_num_residues': args['abs_len'],
                        'length_in_query': True})
    return filters


def filter_by_blast():
    'Tha main function of the binary'
    parser = _setup_argparse()
    args = _parse_args(parser)

    in_fhands = args['in_fhands']
    out_fhand = args['out_fhand']

    seq_packets = read_seq_packets(in_fhands, file_format=args['in_format'])

    database = args['blastdb']
    program = args['blast_program']
    filters = _prepare_filters(args)
    filter_by_blast = FilterBlastMatch(database, program, filters,
                                       reverse=args['reverse'])

    seq_packets, workers = process_seq_packets(seq_packets, [filter_by_blast],
                                               processes=args['processes'])
    write_seq_packets(out_fhand, seq_packets, args['out_format'],
                      workers=workers)
    out_fhand.flush()
if __name__ == '__main__':
    sys.exit(main(filter_by_blast))

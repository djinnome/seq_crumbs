#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of seq_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import sys
from crumbs.utils.bin_utils import (main, parse_filter_args, argparse,
                                    create_basic_parallel_argparse,
                                    parse_basic_parallel_args)
from crumbs.bulk_filters import filter_duplicates


def create_filter_argparse(add_reverse=True, **kwargs):
    'It returns a cmd parser for the filter executables'
    parser = create_basic_parallel_argparse(**kwargs)
    parser = argparse.ArgumentParser(parents=[parser], add_help=False)
    parser.add_argument('-e', '--filtered_file',
                        help='Filtered out sequences output file',
                        type=argparse.FileType('wt'))
    group = parser.add_argument_group('Pairing')
    group.add_argument('--paired_reads', action='store_true',
                        help='Filter considering interleaved pairs')
    return parser


def parse_filter_args(parser, add_reverse=True):
    'It parses the command line and it returns a dict with the arguments.'
    args, parsed_args = parse_basic_parallel_args(parser)
    paired_reads = parsed_args.paired_reads
    args['paired_reads'] = paired_reads

    return args, parsed_args


def run():
    'The main function of the binary'
    description = 'It filters the duplicated sequences'
    parser = create_filter_argparse(description=description)
    args = parse_filter_args(parser)[0]

    in_fhands = args['in_fhands']
    passed_fhand = args['out_fhand']
    filter_duplicates(in_fhands, passed_fhand,
                      args['paired_reads'], args['out_format'])

if __name__ == '__main__':
    sys.exit(main(run))
